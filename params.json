{"name":"Scopeio","tagline":"Small utility to get screen dumps and measured data from Rigol DS1054 oscilloscope, using vxi11 software transport over Ethernet","body":"# scopeio\r\nSmall utility to get screen dumps and measured data from Rigol DS1054 oscilloscope, using vxi11 software transport over Ethernet.\r\nControlling the oscilloscope is possible, so any gui could be build over the vxi11 transport, but for now this is just a command line tool.\r\n\r\nObviously there is not so much to do as the transport below is works with very litte buffer size issue and now no code in vxi11 needs changes, python interface is separate. \r\n\r\nAlso the scope does make screendump in bmp format, just need to store it. And the scope does do the scaling of waveform too in ASCII mode, so the needed math is very minimal.\r\n\r\nStarting from version v0.3 the inteface between vxi11 code and python is converted to be shared library created by swig. So there is python module called vxi11 with very primitive first interface, just enough to make single instrument handling work. But this way system is much faster (waveform take is less than one second mithout measurements) and also much less error prone. The speed could still be improved easily as data is read from python eight bytes in one call, but anyway the screendump at least takes time on the scope much more than receiving the result.\r\n\r\nStarting from version v0.5 there is also a class interface python module vxi11conn, which makes things easier and now also multiple instrument connections should be supported as the need data separation is done. How to use this new interface is describe at the end of this page.\r\n\r\n# How it works\r\n\r\nIt uses github project https://github.com/applied-optics/vxi11 as transport. The higher level is python code written for the project, it uses python-pexpect, python-numpy and python-gnuplot packages at least. The interface between vxi11 C/C++ code and python is impemented by swig and for now it is very basic one. The vxi11 code and pythoin interface are buils as python module and it is installed with pip. The capture example program is installed in /usr/local/bin by default.\r\n\r\nDifferent from other similar programs this stores the output to files and only optionally shows them by desired external program. But the capture python script is just an example, you could control all features of the scope and maybe other scopes and instruments as well.\r\n\r\n# Used formats\r\n\r\nThe screendumps will always be in .bmp format as the data comes as is from the oscilloscope itself.\r\n\r\nThe processed outputs can now be taken as .png or .svg format, but of course gnuplot can be modified to generate more options.\r\n\r\nAlso the look of the processed output is very basic, it would need someone knowing gnuplot better to have much nicer pictures.\r\n\r\nExamples of the output files are in images directory.\r\n\r\n# Usage\r\n\r\nHere is the help from the python program:\r\n\r\n```\r\n\r\nUsage: scopeio.py [--nomeas] [--nomodes] [--mode=state] [--after=state]\r\n     [--help] [--prefix=namestart] [--view=program] [--format=<fmt>] \r\n     [--screen] [--noscreen] [--addr=a.b.c.d] [--config=filename]\r\n     [--size=xsize,ysize] [channels] ... [channels]\r\n\r\nDefault prefix is \"scope\".\r\nFormats supported now: png (default) and svg.\r\nSetting --nomodes means that scope is not stopped or run during capture.\r\nSetting --mode=STOP or --mode=RUN is mode for measurement time and similarly\r\n--after=STOP or --after=RUN is mode left on after measurement. Default is\r\nnot to change scope mode.\r\nDefault size is 1000,640 pixels, can be for example by --size=800,480, this\r\ndoes not affect the screendump, which is always 800,480 from the scope\r\n\r\nExamples:\r\n  scopeio.py --nomeas --view=mirage 1           -- ch1 shown in mirage with no measurements (faster)\r\n  scopeio.py 12 34 13 23  --prefix=myfile       -- ch1/ch2 ch3/ch4 ch1/ch3 ch3/ch4 images done\r\n  scopeio.py --view=gimp 1234 --format=svg      -- all 4 channels in svg and send to gimp\r\n  scopeio.py --screen --mode=STOP               --- take only display screen dump, STOP the scope\r\n  scopeio.py --screen 12 --nomodes              --- take screen dump and two channel graph, no STOP/RUN\r\n  scopeio.py --addr=192.168.1.100 1 --noscreen  --- scope ip address set, no screen capture\r\n  scopeio.py --config=~/.scopeio.myconfig       --- alternate config file, default is ~/.scopeio\r\n\r\nDefault config file is  ~/.scopeio, all above settings can be there, one per line, same syntax,\r\nlines starting with # are taken as comments.\r\n\r\n```\r\n\r\nThere are some new features now, the STOP/RUN of scope can be used or not, the image sizes can be set and so on.\r\n\r\n# Examples\r\n\r\nPictures in pictures directory are made by next two command examples:\r\n\r\n./scopeio.py --screen 12 --view=mirage\r\n\r\n![Screendump (here converted to png)](images/scope-1-screendump-12.06.2015-09.29.33.png)\r\n\r\n![Measurement of two channels](images/scope-2-12-12.06.2015-09.29.35.png)\r\n\r\n./scopeio.py --noscreen --nomeas 1 1 1 1 1 1 1 1 1 1 1234\r\n\r\n![First measurement of ch1](images/scope-1-1-12.06.2015-12.12.26.png)\r\n\r\n![Tenth measurement of ch1](images/scope-10-1-12.06.2015-12.12.33.png)\r\n\r\nWithout the default measurements the taking of waveform is under one second, time between the ten is 8 seconds.\r\nWith the four measurements (VPP, VMAX, VMIN and FREQUENCY) the time for one measurement is around 2 seconds.\r\nStarting from release v0.4-beta the speed is improved to 10/6 seconds without measurements and 10/11 seconds with the four measurements, because reading from vxi11 part was changed from 1 byte mode to 8 byte mode. So the speed in nearly doubled now.\r\n\r\n\r\n![Measurement of four channels](images/scope-11-1234-12.06.2015-12.12.35.png)\r\n\r\nNote that scalings vary as different channels are shown, because the measurement is not a screen capture, it is not scaled in y-axis, the scope calculates real value itself. So when channels have different amplitude, you may want them in separate pictures. Screendump is of course much better to get same display as in oscilloscope screen.\r\n\r\n# File naming\r\n\r\n```\r\n\r\n\r\nScreendump:  <prefix>-<sequencenumber>-screendump-<date>-<time>.bmp\r\n\r\nMeasurement: <prefix>-<sequencenumber>-<channels>-<date>-<time>.[png | svg]\r\n\r\n```\r\n\r\n# vxi11conn python module usage\r\n\r\n```\r\n\r\nimport vxi11conn\r\n\r\nmyscope = vxi11conn.conn()\r\n\r\nconnected = myscope.connect('192.168.1.112', 10000000, 'Rigol_DS1054'))\r\nif not connected:\r\n  exit(0)\r\n\r\nresp = myscope.command('*IDN?')\r\nprint(resp)\r\n\r\nresp = myscope.command('DISPLAY:DATA?', 10000, 'BIN')[11:-3]\r\n# response is screendump in binary data, write to binary file *.bmp \r\n\r\nmyscope.disconnect()\r\n\r\ndel myscope\r\n\r\n\r\n```\r\n\r\n# vxi11conn python module in used manually\r\n\r\n```\r\n\r\n$ python\r\nPython 2.7.9 (default, Apr  2 2015, 15:33:21) \r\n[GCC 4.9.2] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import vxi11conn\r\n>>> rigol=vxi11conn.conn()\r\n>>> rigol.connect('192.168.1.117')\r\nTrue\r\n>>> rigol.command('*IDN?')\r\n'RIGOL TECHNOLOGIES,DS1104Z,DS1ZA171205656,00.04.02.SP4\\n\\x00'\r\n>>> rigol.command('*IDN?', 1000, 'BIN')\r\nbytearray(b'RIGOL TECHNOLOGIES,DS1104Z,DS1ZA171205656,00.04.02.SP4\\n\\x00')\r\n>>> rigol.disconnect()\r\n>>> del rigol\r\n>>> exit(0)\r\n$\r\n\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}